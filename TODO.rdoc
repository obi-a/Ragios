==TODO
* update to activerecord 4.0

* Summarize and group a monitor's change of state and event_type by date, this quickly summaries a monitor's behavior and performance over any given time period


* write about directly testing a plugin by calling generic_monitor
 generic_monitor = Ragios::GenericMonitor.new monitor
 generic_monitor.test_command?

===Nice to have


* Document the feature: Grouping monitors by tag

* Add validation for the REST api input data

*Ragios URL plugin should allow users to set the timeout

*Ragios URL plugin should allow users to set the type of http request they choose either a GET or POST and include body  data for a POST


==DONE
0.6.2.1
* change rename AuthSession cookie to RagiosSession cookie, because CouchDB  uses the same cookie, and this causes problems for CouchDB futon when running Ragios Web Admin and Futon on the same browser,
* Add API GET single event, GET all events and DELETE an event
* Add Web Admin option to view and delete an event, and to view all events

=Goals for versions 0.6.2
* Add a web UI admin dashboard for Ragios.
* Add unit tests for Ragios::NotifyJob

Add methods  - get results, get notifications, get errors

* Document fail_tolerance feature
* Rename specs to reflect classes and code being tested eg ragios_server_spec to controller.spec
* fix failing tests on the current new refactor - refactor schedulers
* Ragios Controller shouldn't know anything about plugins -  generic monitor should handle that internally
* Make notifiers plug and play, move notifier specific information out of the generic.monitor and system.monitor class
* Add specs for plug & play notifiers
* Document plug & play notifiers
* Add unit tests & specs for monitors.rb
* simplify plugin requirements and document
* Get Ragios server running on heroku
* Document Ragios Server Ruby API using the console rake console
* Clean up return values from Ragios::Server for REST & APIs
* Make Ragios server bind address & port to be configurable (the server.xml can be updated or make it 0.0.0.0 by default), or just document the current way to change it

* send notifications asynchronously with sucker_punch
* Allow email notifiers to support multiple contacts eg { contact: ['xyz@mail.com','foo@mail.com'] }
* Notification scheduler should be tagged so that it could be controlled (start/stopped)
* Follow REST completely for status updates, Add status updates delete/restart/stop by id instead by tag
*Plugins should be able to override all methods of the Ragios::Monitors::System class. Making plugins firstclass Monitors
* inheritance dependence of the Ragios::Monitors::System class and all the required variables - evantually delete that class
* Ragios::Server may need to should have an exception class to allow clients like the RESTserver know exactly what a problem is with specific details.
* update plugin testing documentation
* Add a ragios console similar to rails console or irb.
* Switch from thin to unicorn if conditions are appropriate - no need to switch
* make the ragios server bind address/port to be configurable - no necessary
* make it part of the config to choose the name of databases that will be used to store monitors, logs, sessions and status updates
* rename server.ru to config.ru - move items to an initializer file
* move all configuration to environment variables
* add tests for
  GET /monitors
  GET /monitors/:id
* change GET /monitors/every/1m to GET /monitors?every=1m
* add specs for Ragios::Admin

*Complete test coverage of the new system

*Create a plugin architecture, so that all monitors (like HTTP, DNS,process monitors) are added as plugins. This will also allow developers to easily write customized plugins. OR easily install plugins written by other developers.

*Create a simple http server for Ragios that responds to REST requests. This will enable other apps to communicate with Ragios via REST. Example a Rails,Sinatra or javascript app could provide a Web UI for Ragios via REST. The datafeed from Ragios could be fed to webpage, blog or mobile app.

*Add ability to persist Ragios information and real-time statistics to a database. This will allow service performance monitoring overtime. It will also enable better monitor control.

*Document the new Ragios system 0.5.1

